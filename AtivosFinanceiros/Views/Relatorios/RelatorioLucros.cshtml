@model List<AtivosFinanceiros.Models.ViewModels.RelatorioLucrosViewModel>

@{
    ViewData["Title"] = "Relatório de Lucros";

    var dataInicioStr = ViewBag.DataInicio as string ?? "";
    var dataFimStr = ViewBag.DataFim as string ?? "";

    DateTime.TryParse(dataInicioStr, out DateTime dataInicio);
    DateTime.TryParse(dataFimStr, out DateTime dataFim);

    string faixaDatas = "";
    if (dataInicio != default && dataFim != default)
    {
        faixaDatas = $"Relatório: {dataInicio:dd/MM/yyyy} até {dataFim:dd/MM/yyyy}";
    }

    bool formularioFoiEnviado = !string.IsNullOrEmpty(dataInicioStr) && !string.IsNullOrEmpty(dataFimStr);
    double totalLucroBruto = Model.Sum(x => x.LucroTotalBruto);
    double totalLucroLiquido = Model.Sum(x => x.LucroTotalLiquido);
}
<p></p>
<h2 class="mb-4">Relatório de Lucros</h2>

<div id="mensagemAlerta"></div>

<form method="get" class="mb-4">
    <div class="row">
        <div class="col-md-4">
            <label for="dataInicio" class="form-label">Data Início</label>
            <input type="date" id="dataInicio" name="dataInicio" class="form-control" value="@dataInicioStr" required />
        </div>
        <div class="col-md-4">
            <label for="dataFim" class="form-label">Data Fim</label>
            <input type="date" id="dataFim" name="dataFim" class="form-control" value="@dataFimStr" required />
        </div>
        <div class="col-md-3 align-self-end">
            <button type="submit" class="btn btn-primary w-100">Gerar Relatório</button>
        </div>
        <div class="col-md-3 align-self-end">
            <button type="button" class="btn btn-secondary w-100" id="btnRelatoriosGuardados">Relatórios Guardados</button>

        </div>
    </div>
</form>

@if (!formularioFoiEnviado)
{

<div class="alert alert-info text-center">Nenhum relatório gerado. Selecione um intervalo de datas e clique em <strong>"Gerar Relatório"</strong>.</div>
}
else if (!Model.Any())
{
<div class="alert alert-warning text-center">Nenhum lucro encontrado no intervalo selecionado.</div>
}
else
{
    <p class="text-muted">@faixaDatas</p>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Nome do Ativo</th>
                <th>Tipo</th>
                <th class="text-end">Lucro Mensal Bruto</th>
                <th class="text-end">Lucro Mensal Líquido</th>
                <th class="text-end">Lucro Total Bruto</th>
                <th class="text-end">Lucro Total Líquido</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Nome</td>
                    <td>@item.TipoAtivo</td>
                    <td class="text-end">@item.LucroMensalBruto.ToString("C")</td>
                    <td class="text-end">@item.LucroMensalLiquido.ToString("C")</td>
                    <td class="text-end">@item.LucroTotalBruto.ToString("C")</td>
                    <td class="text-end">@item.LucroTotalLiquido.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>

    <p class="fw-bold text-end mt-3">
        Total Lucro Bruto: @totalLucroBruto.ToString("C") <br />
        Total Lucro Líquido: @totalLucroLiquido.ToString("C")
    </p>

    <form id="registrarRelatorioForm" class="d-flex justify-content-end">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-success mt-3">Salvar Relatório</button>
    </form>
}

@if (formularioFoiEnviado && Model.Any())
{
    <div class="d-flex justify-content-end mb-3">
        <form method="get" action="@Url.Action("ExportarPdfRelatorioLucros", "Relatorios")" class="mb-3">
            <input type="hidden" name="dataInicio" value="@dataInicioStr" />
            <input type="hidden" name="dataFim" value="@dataFimStr" />
            <button type="submit" class="btn btn-outline-primary">Exportar PDF</button>
        </form>
    </div>
}

<div id="overlayRelatorios" class="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-75 d-none" style="z-index: 1050;">
    <div class="container mt-5 bg-white p-4 rounded shadow" style="max-width: 600px; max-height: 80vh; overflow-y: auto;">
        <div class="d-flex justify-content-between mb-3">
            <h5>Relatórios Guardados</h5>
            <button class="btn-close" id="fecharOverlay" aria-label="Fechar"></button>
        </div>
        <div id="listaRelatoriosGuardados">
            <p>Carregando...</p>
        </div>
    </div>
</div>

@section Scripts {
<script>
    function mostrarMensagemBootstrap(tipo, texto) {
        const container = document.getElementById('mensagemAlerta');
        container.innerHTML = `
            <div class="alert alert-${tipo} alert-dismissible fade show" role="alert">
                ${texto}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fechar"></button>
            </div>`;
    }

    function formatDateISO(dateStr) {
        const partes = dateStr.split('/');
        if (partes.length !== 3) return '';
        return `${partes[2]}-${partes[1].padStart(2, '0')}-${partes[0].padStart(2, '0')}`;
    }

    document.getElementById('registrarRelatorioForm')?.addEventListener('submit', function (e) {
        e.preventDefault();

        const dataInicio = document.getElementById('dataInicio').value;
        const dataFim = document.getElementById('dataFim').value;

        if (!dataInicio || !dataFim) {
            mostrarMensagemBootstrap("danger", "Por favor, selecione o intervalo de datas.");
            return;
        }

        fetch('@Url.Action("SalvarRelatorio", "Relatorios")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                DataInicio: dataInicio,
                DataFim: dataFim,
                TipoRelatorio: 'Lucros'
            })
        })
        .then(response => {
            if (!response.ok) throw new Error('Erro na requisição');
            return response.json();
        })
        .then(data => {
            if (data.success) {
                mostrarMensagemBootstrap("success", "Relatório salvo com sucesso!");
            } else {
                mostrarMensagemBootstrap("danger", data.message || "Erro ao salvar relatório");
            }
        })
        .catch(error => {
            console.error('Error:', error);
            mostrarMensagemBootstrap("danger", "Erro ao salvar relatório");
        });
    });

    document.getElementById('btnRelatoriosGuardados').addEventListener('click', function () {
        const overlay = document.getElementById('overlayRelatorios');
        const lista = document.getElementById('listaRelatoriosGuardados');

        overlay.classList.remove('d-none');
        lista.innerHTML = '<p>Carregando...</p>';

        fetch('@Url.Action("GetRelatoriosGuardados", "Relatorios")?tipoRelatorio=Lucros')
            .then(res => {
                console.log('Response status:', res.status);
                if (!res.ok) throw new Error('HTTP error ' + res.status);
                return res.json();
            })
            .then(data => {
                console.log('Dados recebidos:', data);
                if (!data || data.length === 0) {
                    lista.innerHTML = '<p>Nenhum relatório salvo.</p>';
                    return;
                }

                let html = '<ul class="list-group">';
                data.forEach(r => {
                    let dataInicio = r.dataInicio; 
                    let dataFim = r.dataFim;        
                    
                    html += `
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            ${dataInicio} - ${dataFim}
                            <button class="btn btn-sm btn-outline-primary ver-relatorio" 
                                    data-inicio="${dataInicio}" 
                                    data-fim="${dataFim}">Ver</button>
                        </li>`;
                });
                html += '</ul>';
                lista.innerHTML = html;
                
                document.querySelectorAll('.ver-relatorio').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const inicio = this.getAttribute('data-inicio'); // dd/MM/yyyy
                        const fim = this.getAttribute('data-fim');       // dd/MM/yyyy

                        const inicioISO = formatDateISO(inicio);
                        const fimISO = formatDateISO(fim);

                        // Preenche os inputs com formato ISO
                        document.getElementById('dataInicio').value = inicioISO;
                        document.getElementById('dataFim').value = fimISO;
                        
                        document.getElementById('overlayRelatorios').classList.add('d-none');
                        
                        const params = new URLSearchParams({
                            dataInicio: inicioISO,
                            dataFim: fimISO
                        });

                        window.location.href = '@Url.Action("RelatorioLucros", "Relatorios")' + '?' + params.toString();
                    });
                });
            })
            .catch(err => {
                console.error('Erro no fetch dos relatórios guardados:', err);
                lista.innerHTML = `<p class="text-danger">Erro ao carregar relatórios guardados.</p>`;
            });
    });

    document.getElementById('fecharOverlay').addEventListener('click', function () {
        document.getElementById('overlayRelatorios').classList.add('d-none');
    });
</script>
}
